Questions for Lesson 7

1. What method do you put in the top of a controller so that something happens
before some or all of the controller actions execute?  Where can you put that
change so that it affects all controllers?

To make something happen before some or all of the controller actions execute before_action method is used in Ruby on Rails.
To make the before_action affect all controllers in Ruby on Rails, you can define the it in the ApplicationController, which is the base controller for all other controllers.


2. Consider the following statement:

bin/rails generate model subscription forum:references user:references priority:integer

This creates several files, including two you need to know about.  What are they?
After you do this statement but before starting the rails server, you have to do another
command.  What is that command?

The two key files it generates are:
1. Migration File: 20240806182410_create_subscriptions.rb
This file creates subscriptions table in the database with the specified columns.
2. Model File: subscription.rb
The model file is where you can add validations, associations (like belongs_to :forum and belongs_to :user), and other business logic related to the Subscription model.


3. What table is created as a result of the migration described above? What are the column
names in that table? What is the primary key? What are the foreign keys?  What does a 
foreign key do?

The subscriptions table is created as a result of the migration described above

The column names are:
  forum, which is a foreign_key connected to forums table primary keys
  user, which is a foreign_key connected to users table primary keys
  priority, which data type is integer, and
  timestamps, which is filled automatically upon creation or update. 


4. You have the following lines in the Subscription model:

belongs_to :user
belongs_to :forum

Because of this, you have several additional methods added to the Subscription class.  This means
that if you have a @subscription (an instance of Subscription), you have a couple of methods
used to refer to associated database methods.  What are those methods?  (Actually there are a few,
but there are two in particular you should know.)

When the following lines are added to the Subscription model:
  belongs_to :user
  belongs_to :forum
two key methods are automatically generated by Rails:
  1 .user method. Calling @subscription.user returns the user who is associated with that subscription.
  2 .forum method. Calling @subscription.forum returns the forum that is associated with that subscription.


5. You have the following lines in the User model.

has_many :subscriptions
has_many :posts
has_many :forums, through: :subscriptions

What are threee important methods that are available to instances of the user model because
of these lines?

1 .subscriptions method. Calling @user.subscriptions gives you all the subscriptions that belong to that user.
2 .posts method. Calling @user.posts gives you all the posts that were created by that user.
3 .forums method. Calling @user.forums will give you all the forums that the user has subscriptions to.


6. Suppose that user is an instance of the User class. What kind of object is returned by
user.subcriptions?  Hint: To find out, go into the Rails console for your application.
Then do:

user=User.first
subscriptions = user.subscriptions
subscriptions.class

The second call returns what looks like an empty array -- but it isn't
of the Array class. This is important, because you can do, for 
example:

new_subscription = subscriptions.new

or

new_subscription = user.subscriptions.new

Try that last line.  You will see that it creates a subscription object, but that
object is not entirely empty.  Which attribute is set? Where does it get that
value?

new_subscription = user.subscriptions.new creates a new subcription, where the user_id attribute is automatically set to the id of the user instance that was used to create the new subscription.


7. Suppose that user is an instance of User, and forum is an instance of Forum.  What
Active Record Statement could you use to retrieve all the user's posts for that
forum?  Hint: You need to have a where in your statement. Try this out in the console.
You will see the SQL that is executed logged to the screen.  What is that SQL?

Active Record Statement to retrieve all the specific user's posts for the specific
forum is:
  user_posts_in_forum = Post.where(user_id: user.id, forum_id: forum.id)
Yet first you have to specify the user id and the forum id with this statements:
  user = User.first  # Or find a specific user
  forum = Forum.first  # Or find a specific forum


8. You have the following method in your posts controller:

  def destroy
    @forum = @post.forum
    @post.destroy
    redirect_to @forum, notice: "Your post was deleted."
  end

There is a security exposure, a risk that a hacker could do damage.  What is that
risk? What two things are done in your code to prevent the risk?

The risk is that unauthorized user can delete the post.

One thing that prevennt the risk is:
  before_action :check_logon, except: %w[show] 
Which checks if the user is logged in before any action except showing the forum content

One more thing is:
  before_action :check_access, only: %w[edit update destroy] 
Which checks if the logged inn user have access to edit, update, or delete post.


9. The routes for subscriptions are nested under the forum routes.  How does this
change the routes?  What is the additional hash key and value that is passed in the
params hash to the subscriptions controller as a result of this nesting? Which routes
are unaffected by the nesting?

When the routs are nested, the information about parennt rout is included in the URL. Example:
  POST /forums/:forum_id/subscriptions => subscriptions#create

:forum_id hashs key with the value forum.id is passed in the
params hash to the subscriptions controller as a result of this nesting.

Using shallow: true, except: [:index] allows to leave #show, #edit, #update, and #destroy routs unaffected by the nesting.

shallow: true makes all the routes, except creation a new forum, unaffected, 
except: [:index] switches #index back to be affected.


10. Every action method must do exactly one of two things -- that is, each
method may do all sorts of logic, but at the end, it has to do one of two
things, depending on the outcome of the logic.  What are those two things?

Every action method must either
  1. Render a response, or
  2. Redirect to another action or URL.

